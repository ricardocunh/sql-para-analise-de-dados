-- CRIAÇÃO DO PROJETO
-- DASHBOARD DE VENDAS

-- Objetivo do projeto:
-- Criar um dashboard de vendas com os principais indicadores de desempenho e com os
-- principais drivers dos resultados do mês

-- Link da planilha utilizada https://docs.google.com/spreadsheets/d/1y-zGhONmVj-JekDwgohuSZpLe2vEk3ewsXr4NJYI2Lk/edit#gid=0

-- (Query 1) Receita, leads, conversão e ticket  médio mês a mês
-- Colunas: mês, leads (#), vendas (#), receita (k, R$), conversão (%), ticket médio (k, R$)

-- verificando colunas mês e leads
with 
	leads as (
		SELECT 
			date_trunc('month', visit_page_date)::date as visit_page_month,
			count(*) as visit_page_count
		FROM sales.funnel
		GROUP BY visit_page_month
		ORDER BY visit_page_month
		),

	payments as(
		-- vendas (#), receita (k, R$)
		SELECT
		-- DATA DE PAGAMENTO
			date_trunc('month', fun.paid_date)::date as paid_month,
			count(fun.paid_date) as paid_count,
			sum(pro.price * (1+fun.discount)) as receita
		FROM sales.funnel as fun
		-- relizando um left join para trazer demais informações
		left join sales.products as pro
			ON fun.product_id = pro.product_id
		WHERE fun.paid_date is not null -- para não trazer datas nulas
		GROUP BY paid_month
		ORDER BY paid_month
	)
	
-- conversão (%), ticket médio (k, R$) 
-- Realizando a junção das querys feitas acima
SELECT
	leads.visit_page_month as "Mês",
	leads.visit_page_count as "leads (#)",
	payments.paid_count as "vendas (#)",
	(payments.receita/1000) as "receita (k, R$)",
	(payments.paid_count::float/leads.visit_page_count::float) as "conversão (%)", -- para trazer os números decimais usar o float
	(payments.receita/payments.paid_count/1000) as "ticket médio (k, R$)"
FROM leads
LEFT JOIN payments
	on leads.visit_page_month = paid_month
	
	
	
-- (query 2) Estados que mais venderam
-- Colunas: país, estado, vendas (#)
SELECT 
	'Brazil' as pais,
	cus.state as estado,
	count(fun.paid_date) as "vendas (#)"
FROM sales.funnel as fun
LEFT JOIN sales.customers as cus
	on fun.customer_id = cus.customer_id
-- CRIANDO UM FILTRO DE DATA
WHERE paid_date BETWEEN '2021-08-01' and '2021-08-31'
GROUP BY pais, estado
ORDER BY "vendas (#)" desc
LIMIT 5



-- (query 3) Marcas que mais venderam no mês
-- Colunas: marca, vendas (#)
SELECT
	pro.brand as marca,
	count(fun.paid_date) as "vendas (#)"
FROM sales.funnel as fun
LEFT JOIN sales.products as pro
	on fun.product_id = pro.product_id
WHERE paid_date BETWEEN '2021-08-01' and '2021-08-31'
GROUP BY marca
ORDER BY "vendas (#)" DESC
LIMIT 5



-- (query 3) Marcas que mais venderam no mês
-- Colunas: marca, vendas (#)
SELECT
	pro.brand as marca,
	count(fun.paid_date) as "vendas (#)"
FROM sales.funnel as fun
LEFT JOIN sales.products as pro
	on fun.product_id = pro.product_id
WHERE paid_date BETWEEN '2021-08-01' and '2021-08-31'
GROUP BY marca
ORDER BY "vendas (#)" DESC
LIMIT 5



-- (query 4) Lojas que mais venderam
-- Colunas: lojas, vendas (#)
SELECT
	sto.store_name as loja,
	count(fun.paid_date) as "vendas (#)"
FROM sales.funnel as fun
LEFT JOIN sales.stores as sto
	on fun.store_id = sto.store_id
WHERE paid_date BETWEEN '2021-08-01' and '2021-08-31'
GROUP BY loja
ORDER BY "vendas (#)" DESC
LIMIT 5


-- (query 5) Dias da semana com maior número de visitas ao site
-- Colunas: dia_semana, dia da semana, visitas (#)
SELECT 
    extract('dow' from visit_page_date) as dia_semana,
    case
        when extract('dow' from visit_page_date)=0 then 'domingo'
        when extract('dow' from visit_page_date)=1 then 'segunda'
        when extract('dow' from visit_page_date)=2 then 'terça'
        when extract('dow' from visit_page_date)=3 then 'quarta'
        when extract('dow' from visit_page_date)=4 then 'quinta'
        when extract('dow' from visit_page_date)=5 then 'sexta'
        when extract('dow' from visit_page_date)=6 then 'sábado'
        else null end as "dia da semana",
    count(*) as "visitas (#)"
FROM sales.funnel
WHERE visit_page_date BETWEEN '2021-08-01' AND '2021-08-31'
GROUP BY dia_semana
ORDER BY dia_semana




