-- CONVERSÃO DE UNIDADES

-- TIPOS DE CONVERSÃO
-- OPERADOR ::
-- CAST

-- (exemplo 1) Conversão de texto em data
-- Corrija a query abaixo utilizando o operador ::
SELECT '2021-10-01'::date - '2021-02-01'::date

-- Caso queira alterar uma coluna toda
SELECT nome_coluna::date
FROM nome_tabela


-- (exemplo 2) Conversão de texto em número
-- Corrija a query abaixo utilizando o operador ::
SELECT '100'::numeric - '10'::numeric

-- (exemplo 3) Conversão de número em texto
-- Corrija a query abaixo utilizando o operador ::
SELECT REPLACE(112122::text,'1','A')

-- (exemplo 4) Conversão de texto em data
-- Corrija a query abaixo utilizando a função CAST
SELECT cast('2021-10-01' as date) - cast('2021-02-01' as date)

-- #################################

-- TRATAMENTO GERAL

-- TIPOS
-- CASE WHEN
-- COALESCE()

-- (exemplo 1) Agrupamento de dados com CASE WHEN
-- Calcule o nº de clientes que ganham abaixo de 5k, entre 5k e 10k, entre 10k e
-- 15k e acima de 15k
WITH faixa_de_renda as(
    SELECT
        income,
        case
            when income < 5000 then '0-5000'
            when income >= 5000 and income < 10000 then '5000-10000'
            when income >= 10000 and income < 15000 then '10000-15000'
            else '15000+'
            end as faixa_renda
    FROM sales.customers
)

SELECT faixa_renda, count(*)
FROM faixa_de_renda
GROUP BY faixa_renda


-- (exemplo 2) Tratamento de dados nulos com COALESCE
-- Crie uma coluna chamada populacao_ajustada na tabela temp_tables.regions e
-- preencha com os dados da coluna population, mas caso esse campo estiver nulo,
-- preencha com a população média (geral) das cidades do Brasil
SELECT *,
    coalesce(population, (select avg(population) from temp_tables.regions)) as populacao_ajustada
FROM temp_tables.regions
--WHERE population is null

-- ##################################

-- TRATAMENTO DE TEXTOS

-- TIPOS
-- LOWER()
-- UPPER()
-- TRIM()
-- REPLACE()

--(exemplo 1) Corrija o primeiro elemento das queries abaixo utilizando os comandos
-- de tratamento de texto para que o resultado seja sempre TRUE
SELECT upper('São Paulo') = 'SÃO PAULO'

SELECT lower('São Paulo') = 'são paulo'

SELECT trim('SÃO PAULO') = 'SÃO PAULO'

SELECT replace('SAO PAULO') = 'SÃO PAULO'


-- ##############################

-- TRATAMENTO DE DATAS

-- TIPOS
-- INTERVAL
-- DATE_TRUNC
-- EXTRACT
-- DATEDIFF

-- EXEMPLOS 
-- (exemlo 1) Soma de datas utilizando INTERVAL
-- Calcule a data de hoje mais 10 unidades (dias, semanas, meses e hora)
SELECT (current_date + interval '10 weeks')::date -- Somando 10 semanas [Date será apenas para retornar a data, sem o horaŕio]
SELECT (current_date + interval '10 months')::date
SELECT (current_date + interval '10 hours')

-- (exemplo 2) Truncagem de datas utilizando DATE_TRUNC
-- Calcule quantas visitas ocorreram por mês no site da empresa
SELECT 
	date_trunc('month', visit_page_date)::date as visit_page_month,
	COUNT(*)
FROM sales.funnel
GROUP BY visit_page_month
ORDER BY visit_page_month DESC

-- (exemplo 3) Extração de unidades de uma data utilizando EXTRACT
-- Calcule qual é o dia da semana que mais recebe visitas ao site
-- DOW -> DAY OF WEEK
SELECT
	 extract('dow' from visit_page_date) as dia_da_semana,
	 count(*)
FROM sales.funnel
GROUP BY dia_da_semana
ORDER BY dia_da_semana

-- (exemplo 4) Diferenças entre datas com operador de subtração (-)
-- Calcule a diferença entre hoje e '2018-06-01', os dias, semanas, meses e anos

-- DIAS
SELECT (current_date - '2018-06-01')
-- SEMANAS
SELECT (current_date - '2018-06-01')/7
-- MÊS
SELECT (current_date - '2018-06-01')/30
-- ANOS
SELECT (current_date - '2018-06-01')/365

-- ###################################

-- FUNÇÕES
-- Serve para criar comandos personalizados de scripts usados recorrentemente

-- (exemplo 1) Crie uma função chamada DATEDIFF para calcular a diferença entre
-- duas datas em dias, semanas, meses, anos
-- DIAS
SELECT (current_date - '2018-06-01')
-- SEMANAS
SELECT (current_date - '2018-06-01')/7
-- MÊS
SELECT (current_date - '2018-06-01')/30
-- ANOS
SELECT (current_date - '2018-06-01')/365

-- Criando a função
CREATE function datediff(unidade varchar, data_inicial date, data_final date)
returns integer
language sql

as
$$
	SELECT
		CASE
			WHEN unidade in('d', 'day','days') then (data_final - data_inicial)
			WHEN unidade in('w', 'week','weeks') then (data_final - data_inicial)/7
			WHEN unidade in('m', 'month','months') then (data_final - data_inicial)/30
			WHEN unidade in('y', 'year','years') then (data_final - data_inicial)/365
			end as diferenca
$$
-- DIA
SELECT datediff('day', '2021-02-04', current_date)
-- MÊS
SELECT datediff('month', '2021-02-04', current_date)
-- ANO
SELECT datediff('year', '2021-02-04', current_date)

-- (exemplo 2) Delete a função DATEDIFF criada no exercicios anterior
DROP function datediff